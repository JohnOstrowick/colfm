#include <QApplication>
#include <QMainWindow>
#include <QToolBar>
#include <QAction>
#include <QFileSystemModel>
#include <QFileIconProvider>
#include <QTreeView>
#include <QListView>
#include <QSplitter>
#include <QDir>
#include <QVector>
#include <QIcon>
#include <QDebug>

enum class ViewMode { Tree, Column, Icon };

class ColFM : public QMainWindow {
public:
    ColFM(QWidget *parent=nullptr) : QMainWindow(parent) {
        model = new QFileSystemModel(this);
        model->setIconProvider(new QFileIconProvider());
        model->setFilter(QDir::AllEntries | QDir::NoDotAndDotDot | QDir::Hidden);
        currentRoot = model->setRootPath(QDir::homePath());

        // Toolbar — your existing placeholders first
        QToolBar *tb = new QToolBar("Main Toolbar", this);
        tb->setMovable(false);
        addToolBar(Qt::TopToolBarArea, tb);
        tb->addAction(QIcon("icons/move_to_trash.png"), "Move to Trash");
        tb->addAction(QIcon("icons/refresh.png"),       "Refresh Folder");
        tb->addAction(QIcon("icons/open_trash.png"),    "Open Trash");
        tb->addAction(QIcon("icons/up_level.png"),      "Go Up a Level");
        tb->addAction(QIcon("icons/open.png"),          "Open");
        tb->addAction(QIcon("icons/close.png"),         "Close");
        tb->addAction(QIcon("icons/info.png"),          "File Info & Preview");
        tb->addAction(QIcon("icons/rename.png"),        "Rename");
        tb->addAction(QIcon("icons/move.png"),          "Move");
        tb->addAction(QIcon("icons/duplicate.png"),     "Copy / Duplicate");
        tb->addAction(QIcon("icons/softlink.png"),      "Create Softlink");

        // Separator, then the 3 new view-mode buttons
        tb->addSeparator();
        QAction *treeBtn   = tb->addAction(QIcon("icons/view_tree.png"),   "Tree/List View");
        QAction *columnBtn = tb->addAction(QIcon("icons/view_columns.png"),"Column View");
        QAction *iconBtn   = tb->addAction(QIcon("icons/view_icons.png"),  "Icon View");

        connect(treeBtn,   &QAction::triggered, this, [this]{ setViewMode(ViewMode::Tree);   });
        connect(columnBtn, &QAction::triggered, this, [this]{ setViewMode(ViewMode::Column); });
        connect(iconBtn,   &QAction::triggered, this, [this]{ setViewMode(ViewMode::Icon);   });

        // Start in Tree view by default
        setViewMode(ViewMode::Tree);
        setWindowTitle("ColFM — Multi-View File Manager");
        resize(1400, 800);
    }

private:
    QFileSystemModel *model{};
    ViewMode mode = ViewMode::Tree;
    QModelIndex currentRoot;          // remember where we are
    QVector<QListView*> columns;      // for Column mode

    // ========== View builders ==========
    QWidget* buildTreeWidget(const QModelIndex &root) {
        auto *view = new QTreeView();
        view->setModel(model);
        view->setRootIndex(root);
        view->setHeaderHidden(true);
        view->setSelectionBehavior(QAbstractItemView::SelectRows);
        view->setAlternatingRowColors(true);
        view->setIconSize(QSize(32,32));

        connect(view, &QTreeView::clicked, this, [this, view](const QModelIndex &idx){
            if (!idx.isValid()) return;
            // Update current root on double click for directory navigation
            if (model->isDir(idx)) {
                view->setRootIndex(idx);
                currentRoot = idx;
            } else {
                qDebug() << "Preview placeholder for:" << model->filePath(idx);
            }
        });
        return view;
    }

    QWidget* buildColumnWidget(const QModelIndex &root) {
        auto *splitter = new QSplitter(Qt::Horizontal);
        splitter->setChildrenCollapsible(false);
        columns.clear();

        addColumn(splitter, root);
        return splitter;
    }

    QWidget* buildIconWidget(const QModelIndex &root) {
        auto *view = new QListView();
        view->setModel(model);
        view->setRootIndex(root);
        view->setViewMode(QListView::IconMode);
        view->setIconSize(QSize(64,64));
        view->setGridSize(QSize(100,100));
        view->setSpacing(8);
        view->setResizeMode(QListView::Adjust);
        view->setMovement(QListView::Static);
        view->setUniformItemSizes(true);

        connect(view, &QListView::clicked, this, [this, view](const QModelIndex &idx){
            if (!idx.isValid()) return;
            if (model->isDir(idx)) {
                view->setRootIndex(idx);
                currentRoot = idx;
            } else {
                qDebug() << "Preview placeholder for:" << model->filePath(idx);
            }
        });
        return view;
    }

    // Helper for Column mode: add one column and wire it to spawn the next
    void addColumn(QSplitter *splitter, const QModelIndex &root) {
        auto *lv = new QListView(splitter);
        lv->setModel(model);
        lv->setRootIndex(root);
        lv->setSelectionMode(QAbstractItemView::SingleSelection);
        lv->setViewMode(QListView::ListMode);
        lv->setUniformItemSizes(true);
        lv->setIconSize(QSize(32,32));
        lv->setAlternatingRowColors(true);
        lv->setSpacing(2);
        lv->setMinimumWidth(260);
        lv->setFixedWidth(300); // Finder-like fixed column width

        columns.push_back(lv);

        connect(lv->selectionModel(), &QItemSelectionModel::currentChanged,
                this, [this, splitter, lv](const QModelIndex &cur, const QModelIndex &){
            // Remove columns to the right
            int i = splitter->indexOf(lv);
            while (splitter->count() > i + 1) {
                QWidget *w = splitter->widget(splitter->count() - 1);
                columns.removeLast();
                w->deleteLater();
            }
            if (!cur.isValid()) return;

            if (model->isDir(cur)) {
                addColumn(splitter, cur); // extend to the right
                currentRoot = cur;
            } else {
                qDebug() << "Preview placeholder for:" << model->filePath(cur);
            }
        });
    }

    // ========== Switcher ==========
    void setViewMode(ViewMode m) {
        mode = m;
        QWidget *old = centralWidget(); // Qt will delete when replaced
        if (old) old->deleteLater();

        QWidget *w = nullptr;
        QModelIndex root = currentRoot.isValid() ? currentRoot : model->index(QDir::homePath());

        switch (mode) {
            case ViewMode::Tree:   w = buildTreeWidget(root);   break;
            case ViewMode::Column: w = buildColumnWidget(root); break;
            case ViewMode::Icon:   w = buildIconWidget(root);   break;
        }
        setCentralWidget(w);
    }
};

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);
    app.setStyle("Fusion");
    ColFM w; w.show();
    return app.exec();
}
